// Code generated by MockGen. DO NOT EDIT.
// Source: eventsourced/intern/serv (interfaces: Consumer)

// Package mock_serv is a generated GoMock package.
package mock_serv

import (
	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
	reflect "reflect"
)

// MockConsumer is a mock of Consumer interface
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockConsumer) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockConsumerMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConsumer)(nil).Close))
}

// Consume mocks base method
func (m *MockConsumer) Consume(arg0 string) (<-chan amqp.Delivery, error) {
	ret := m.ctrl.Call(m, "Consume", arg0)
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume
func (mr *MockConsumerMockRecorder) Consume(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockConsumer)(nil).Consume), arg0)
}

// Ignore mocks base method
func (m *MockConsumer) Ignore(arg0 chan error) {
	m.ctrl.Call(m, "Ignore", arg0)
}

// Ignore indicates an expected call of Ignore
func (mr *MockConsumerMockRecorder) Ignore(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ignore", reflect.TypeOf((*MockConsumer)(nil).Ignore), arg0)
}

// Notify mocks base method
func (m *MockConsumer) Notify(arg0 chan error) chan error {
	ret := m.ctrl.Call(m, "Notify", arg0)
	ret0, _ := ret[0].(chan error)
	return ret0
}

// Notify indicates an expected call of Notify
func (mr *MockConsumerMockRecorder) Notify(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockConsumer)(nil).Notify), arg0)
}
